import 'package:cinemate/features/ticket_purchase/data/models/payment_models/amount_details_model.dart';
import 'package:cinemate/features/ticket_purchase/data/models/payment_models/automatic_payment_methods_model.dart';
import 'package:cinemate/features/ticket_purchase/data/models/payment_models/metadata_model.dart';
import 'package:cinemate/features/ticket_purchase/data/models/payment_models/payment_method_options_model.dart';
import 'package:cinemate/features/ticket_purchase/domain/entities/payment_entities/payment_intent_entity.dart';

class PaymentIntentModel extends PaymentIntentEntity {
  const PaymentIntentModel({
    required super.id,
    required super.object,
    required super.amount,
    required super.amountCapturable,
    required super.amountDetails,
    required super.amountReceived,
    required super.application,
    required super.applicationFeeAmount,
    required super.automaticPaymentMethods,
    required super.canceledAt,
    required super.cancellationReason,
    required super.captureMethod,
    required super.clientSecret,
    required super.confirmationMethod,
    required super.created,
    required super.currency,
    required super.customer,
    required super.description,
    required super.invoice,
    required super.lastPaymentError,
    required super.latestCharge,
    required super.livemode,
    required super.metadata,
    required super.nextAction,
    required super.onBehalfOf,
    required super.paymentMethod,
    required super.paymentMethodOptions,
    required super.paymentMethodTypes,
    required super.processing,
    required super.receiptEmail,
    required super.review,
    required super.setupFutureUsage,
    required super.shipping,
    required super.source,
    required super.statementDescriptor,
    required super.statementDescriptorSuffix,
    required super.status,
    required super.transferData,
    required super.transferGroup,
  });

  factory PaymentIntentModel.fromJson(Map<String, dynamic> json) => PaymentIntentModel(
    id: json["id"],
    object: json["object"],
    amount: json["amount"],
    amountCapturable: json["amount_capturable"],
    amountDetails: json["amount_details"] == null ? null : AmountDetailsModel.fromJson(json["amount_details"]),
    amountReceived: json["amount_received"],
    application: json["application"],
    applicationFeeAmount: json["application_fee_amount"],
    automaticPaymentMethods: json["automatic_payment_methods"] == null ? null : AutomaticPaymentMethodsModel.fromJson(json["automatic_payment_methods"]),
    canceledAt: json["canceled_at"],
    cancellationReason: json["cancellation_reason"],
    captureMethod: json["capture_method"],
    clientSecret: json["client_secret"],
    confirmationMethod: json["confirmation_method"],
    created: json["created"],
    currency: json["currency"],
    customer: json["customer"],
    description: json["description"],
    invoice: json["invoice"],
    lastPaymentError: json["last_payment_error"],
    latestCharge: json["latest_charge"],
    livemode: json["livemode"],
    metadata: json["metadata"] == null ? null : MetadataModel.fromJson(json["metadata"]),
    nextAction: json["next_action"],
    onBehalfOf: json["on_behalf_of"],
    paymentMethod: json["payment_method"],
    paymentMethodOptions: json["payment_method_options"] == null ? null : PaymentMethodOptionsModel.fromJson(json["payment_method_options"]),
    paymentMethodTypes: json["payment_method_types"] == null ? [] : List<String>.from(json["payment_method_types"]!.map((x) => x)),
    processing: json["processing"],
    receiptEmail: json["receipt_email"],
    review: json["review"],
    setupFutureUsage: json["setup_future_usage"],
    shipping: json["shipping"],
    source: json["source"],
    statementDescriptor: json["statement_descriptor"],
    statementDescriptorSuffix: json["statement_descriptor_suffix"],
    status: json["status"],
    transferData: json["transfer_data"],
    transferGroup: json["transfer_group"],
  );
}
